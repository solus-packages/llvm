name       : llvm
version    : 13.0.0
release    : 94
source     :
    - https://github.com/llvm/llvm-project/releases/download/llvmorg-13.0.0/llvm-project-13.0.0.src.tar.xz : 6075ad30f1ac0e15f07c1bf062c1e1268c241d674f11bd32cdf0e040c71f2bf3
homepage   : http://llvm.org/
license    : Apache-2.0-with-LLVM-exception
summary    :
    - Low Level Virtual Machine (Reusable compiler and toolchains)
    - clang : Clang Compiler frontend to LLVM
    - clang-devel : Development files for building clang plugins
    - clang-32bit : 32bit libraries for clang
component  :
    - programming
    - devel : programming.devel
    - clang : programming
    - clang-32bit : emul32
    - clang-32bit-devel : programming.devel
    - clang-devel : programming.devel
debug      : no
libsplit   : no
clang      : yes
builddeps  :
    - pkgconfig32(libelf)
    - pkgconfig32(libffi)
    - pkgconfig32(libxml-2.0)
    - pkgconfig32(ncursesw)
    - pkgconfig32(libedit)
    - doxygen
    - glibc-32bit-devel
    - libgcc-32bit
    - libstdc++-32bit
    - llvm-32bit-devel
    - python-recommonmark
    - swig
    - zlib-32bit-devel
rundeps    :
    - clang :
        - llvm-devel
    - clang-devel :
        - llvm-clang
    - clang-32bit-devel :
        - llvm-clang-32bit
        - llvm-clang-devel
description: |
    The LLVM package contains a collection of modular and reusable compiler and toolchain technologies. The Low Level Virtual Machine (LLVM) Core libraries provide a modern source and target-independent optimizer, along with code generation support for many popular CPUs (as well as some less common ones!). These libraries are built around a well specified code representation known as the LLVM intermediate representation ("LLVM IR").
patterns   :
    - 32bit-devel :
        - /usr/bin/llvm-config32
        - /usr/include/llvm/Config/llvm-config-32.h
        - /usr/lib32/cmake/llvm
    - clang-32bit :
        - /usr/lib32/libclang*.so*
        - /usr/lib32/SampleAnalyzerPlugin.so
        - /usr/lib32/CheckerOptionHandlingAnalyzerPlugin.so
        - /usr/lib32/CheckerDependencyHandlingAnalyzerPlugin.so
        - /usr/lib32/liblldb*.so*
        - /usr/lib32/lib*omp*.so*
    - clang-32bit-devel :
        - /usr/lib32/clang
        - /usr/lib32/cmake/clang
        - /usr/lib32/libclang*.a
        - /usr/lib32/liblldb*.a
    - clang-devel :
        - /usr/include/clang*
        - /usr/include/lld*
        - /usr/include/openmp*
        - /usr/lib64/libclang*.a
    - clang :
        - /usr/bin
        - /usr/libexec
        - /usr/lib64/clang
        - /usr/lib64/libclang*.so*
        - /usr/lib64/SampleAnalyzerPlugin.so
        - /usr/lib64/CheckerOptionHandlingAnalyzerPlugin.so
        - /usr/lib64/CheckerDependencyHandlingAnalyzerPlugin.so
        - /usr/share/man/*/*clang*
        - /usr/share/man/*/*scan-build*
        - /usr/share/llvm/cmake
        - /usr/share/clang
        - /usr/share/opt-viewer
        - /usr/share/scan-build
        - /usr/share/scan-view
    - devel :
        - /usr/bin/FileCheck
        - /usr/bin/bugpoint
        - /usr/bin/count
        - /usr/bin/dsymutil
        - /usr/bin/lli*
        - /usr/bin/llc*
        - /usr/bin/llvm*
        - /usr/bin/not
        - /usr/bin/obj2yaml
        - /usr/bin/opt
        - /usr/bin/sancov
        - /usr/bin/sanstats
        - /usr/bin/verify-uselistorder
        - /usr/bin/yaml-bench
        - /usr/bin/yaml2obj
        - /usr/share/llvm/cmake
replaces   :
    - clang : clang
    - clang-devel : clang-devel
environment: |
    # Decontaminate build environment
    unset LDFLAGS
    unset LD_AS_NEEDED
    unset CFLAGS
    unset CXXFLAGS

    export _LLVM_FLAGS_FINAL="-march=x86-64 -mtune=generic -O3 -fstack-protector -pipe -DNDEBUG"
    export CC=clang
    export CXX=clang++

    # Identical code folding reduces size on disk.
    export LDFLAGS="${LDFLAGS} -Wl,--icf=all"

    # Set flags, projects and targets to build for PGO gen/use builds.
    # We compile just the neccessities during the pgo gen build to speed things up
    if [[ ! -z "${PGO_GEN_BUILD}" ]]; then
        export PGOFLAGS="${_LLVM_FLAGS_FINAL} -fprofile-instr-generate=default-%m.profraw"
        export _PROJECTS="clang;compiler-rt;lld;llvm"
        export _TARGETS="host"
    fi
    if [[ ! -z "${PGO_USE_BUILD}" ]]; then
        PGO_PATH="/home/build/YPKG/root/llvm/pgo/default.profdata"
        export PGOFLAGS="${_LLVM_FLAGS_FINAL} -fprofile-instr-use=$PGO_PATH"
        export _PROJECTS="clang;clang-tools-extra;compiler-rt;libcxx;libcxxabi;lld;llvm;openmp;mlir"
        export _TARGETS="all"
    fi

    # Set common build options here
    export CMAKE_COMMON_OPTIONS="
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DCLANG_DEFAULT_LINKER=lld \
        -DCLANG_DEFAULT_OBJCOPY=llvm-objcopy \
        -DENABLE_EXPERIMENTAL_NEW_PASS_MANAGER=ON \
        -DLLVM_INSTALL_UTILS=ON \
        -DLLVM_BINUTILS_INCDIR=/usr/include \
        -DLLVM_ENABLE_FFI=ON \
        -DLLVM_ENABLE_ZLIB=ON \
        -DLLVM_ENABLE_RTTI=ON \
        -DLLVM_ENABLE_ASSERTIONS=OFF \
        -DENABLE_LINKER_BUILD_ID=ON \
        -DLLVM_ENABLE_PIC=ON \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON \
        -DCLANG_LINK_CLANG_DYLIB=ON"

    # Used by everything except emul32 build
    export CMAKE_X84_64_OPTIONS="
         -DLLVM_DEFAULT_TARGET_TRIPLE=%HOST% \
         -DLLVM_TARGET_ARCH=x86_64 \
         -DLLVM_LIBDIR_SUFFIX=%LIBSUFFIX%"

    # Use the PGO Gen/Use Compiler
    export CMAKE_USE_COMPILER="
        -DCMAKE_AR=$workdir/llvm/solusBuildDir/bin/llvm-ar \
        -DCMAKE_NM=$workdir/llvm/solusBuildDir/bin/llvm-nm \
        -DCMAKE_RANLIB=$workdir/llvm/solusBuildDir/bin/llvm-ranlib \
        -DCMAKE_C_COMPILER=$workdir/llvm/solusBuildDir/bin/clang \
        -DCMAKE_CXX_COMPILER=$workdir/llvm/solusBuildDir/bin/clang++ \
        -DLLVM_CCACHE_BUILD=ON"
setup      : |
    # Just annoying.
    %patch -p1 < $pkgfiles/0001-Silently-ignore-copy-dt-needed-entries.patch

    %patch -p1 < $pkgfiles/fix-scan-build-py-executable-lookup-path.patch
    %patch -p1 < $pkgfiles/disable-bswap-for-spir.patch # ispc
    %patch -Rp1 < $pkgfiles/don-t-accept-nullptr-as-GEP-element-type.patch # intel-graphics-compiler

    # llvm patches
    pushd llvm
        %patch -p1 < $pkgfiles/0001-llvm-Let-the-linker-find-the-correct-ffi-as-cmake-br.patch
    popd

    # Patch cfe for Solus specific options
    pushd clang
        %patch -p1 < $pkgfiles/0001-cfe-Use-correct-Solus-multilib-paths.patch
        %patch -p1 < $pkgfiles/0002-cfe-Use-the-GNU-hash-style-for-Solus-binary-build-id.patch
        %patch -p1 < $pkgfiles/0001-Enable-stack-protector-strong-by-default.patch
    popd

    # Pull lld in line with binutils linkers for consistency
    pushd lld
        %patch -p1 < $pkgfiles/0001-Enable-as-needed-with-LD_AS_NEEDED-variable.patch
        %patch -p1 < $pkgfiles/0002-Make-gnuhash-the-default-when-not-specified.patch
    popd
build      : |
    # PGO gen/use build for amd64.
    pushd llvm
    mkdir solusBuildDir
    pushd solusBuildDir
    cmake -G Ninja .. \
        ${CMAKE_COMMON_OPTIONS} \
        ${CMAKE_X84_64_OPTIONS} \
        -DCMAKE_C_FLAGS_RELEASE="$PGOFLAGS" \
        -DCMAKE_CXX_FLAGS_RELEASE="$PGOFLAGS" \
        -DLLVM_ENABLE_PROJECTS=$_PROJECTS \
        -DLLVM_TARGETS_TO_BUILD=$_TARGETS \
        -DLLVM_BUILD_DOCS=ON \
        -DLLVM_ENABLE_SPHINX=ON \
        -DSPHINX_EXECUTABLE="/usr/bin/sphinx-build" \
        -DSPHINX_OUTPUT_MAN=ON \
        -DSPHINX_OUTPUT_HTML=OFF \
        -DSPHINX_WARNINGS_AS_ERRORS=OFF
    popd
    %ninja_build -v

    # Do only one emul32 build. We can reuse profile data from the amd64 build.
    if [[ ! -z "${PGO_USE_BUILD}" ]]; then
        export PKG_CONFIG_PATH=/usr/lib32/pkgconfig:/usr/share/pkgconfig:/usr/lib/pkgconfig
        export LT_SYS_LIBRARY_PATH=/usr/lib32

        export CC="$workdir/llvm/solusBuildDir/bin/clang -m32"
        export CXX="$workdir/llvm/solusBuildDir/bin/clang++ -m32"

        export CFLAGS="-march=i686 -msse2 -mtune=generic -O3 -fstack-protector -pipe -fprofile-instr-use=$PGO_PATH -DNDEBUG -m32"
        export CXXFLAGS="-march=i686 -msse2 -mtune=generic -O3 -fstack-protector -pipe -fprofile-instr-use=$PGO_PATH -DNDEBUG -m32"

        mkdir emul32 && cd emul32
        cmake .. -G Ninja \
          ${CMAKE_COMMON_OPTIONS} \
          -DLLVM_LIBDIR_SUFFIX=32 \
          -DLLVM_TARGET_ARCH=i686 \
          -DLLVM_DEFAULT_TARGET_TRIPLE=i686-pc-linux-gnu \
          -DLLVM_ENABLE_PROJECTS="clang;compiler-rt;libcxx;libcxxabi;llvm;openmp" \
          -DLLVM_TARGETS_TO_BUILD="host;AMDGPU;BPF" \
          -DCMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX=32 \
          -DLLVM_CCACHE_BUILD=ON
        ninja %JOBS% -v
    fi
profile    : |
    # Profiling is the slowest part of the build, try to cut it down as much as possible.
    # Worth investigating if the running test-suites is faster/produces better profiles...
    pushd llvm
    mkdir build && cd build
    cmake .. -G Ninja \
        ${CMAKE_COMMON_OPTIONS} \
        ${CMAKE_X84_64_OPTIONS} \
        ${CMAKE_USE_COMPILER} \
        -DCMAKE_C_FLAGS_RELEASE="$_LLVM_FLAGS_FINAL" \
        -DCMAKE_CXX_FLAGS_RELEASE="$_LLVM_FLAGS_FINAL" \
        -DLLVM_ENABLE_PROJECTS="clang" \
        -DLLVM_TARGETS_TO_BUILD=host
    ninja %JOBS% -v
install    : |
    pushd llvm
    # Install emul32 build
    DESTDIR="%installroot%" ninja install -C emul32 -v
    mv $installdir/usr/include/llvm/Config/llvm-config.h $installdir/usr/include/llvm/Config/llvm-config-32.h
    mv $installdir/usr/bin/llvm-config{,32}
    # Install x86_64 build
    %ninja_install -v
    popd

    # Do one more build pass here with thin lto enabled but only install core toolchain bits.
    # This is to avoid installing LTO built static files which are generally bork.
    # LTO really shines through with PGO so it's worth the extra hassle.
    pushd llvm
    mkdir lto-install && cd lto-install
    cmake .. -G Ninja \
      ${CMAKE_COMMON_OPTIONS} \
      ${CMAKE_X84_64_OPTIONS} \
      ${CMAKE_USE_COMPILER} \
      -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON \
      -DLLVM_ENABLE_LTO=Thin \
      -DCMAKE_C_FLAGS_RELEASE="$PGOFLAGS" \
      -DCMAKE_CXX_FLAGS_RELEASE="$PGOFLAGS" \
      -DLLVM_ENABLE_PROJECTS="clang;llvm" \
      -DLLVM_TARGETS_TO_BUILD=$_TARGETS
    DESTDIR="%installroot%" ninja %JOBS% install -v

    mv $installdir/usr/include/llvm/Config/llvm-config.h $installdir/usr/include/llvm/Config/llvm-config-%LIBSUFFIX%.h

    # Do NOT include libgomp*, it will conflict with libgomp
    rm $installdir/usr/lib*/libgomp.*

    # LTO Plugin
    install -d -D -m 00755 $installdir/%libdir%/bfd-plugins
    ln -sv ../LLVMgold.so $installdir/%libdir%/bfd-plugins/.
    # Finally add our compatibility header
    install -m 00644 $pkgfiles/llvm-config.h $installdir/usr/include/llvm/Config/llvm-config.h
