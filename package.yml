name       : llvm
version    : 9.0.1
release    : 72
source     :
    - https://github.com/llvm/llvm-project/releases/download/llvmorg-9.0.1/llvm-9.0.1.src.tar.xz : 00a1ee1f389f81e9979f3a640a01c431b3021de0d42278f6508391a2f0b81c9a
    - https://github.com/llvm/llvm-project/releases/download/llvmorg-9.0.1/clang-9.0.1.src.tar.xz : 5778512b2e065c204010f88777d44b95250671103e434f9dc7363ab2e3804253
    - https://github.com/llvm/llvm-project/releases/download/llvmorg-9.0.1/compiler-rt-9.0.1.src.tar.xz : c2bfab95c9986318318363d7f371a85a95e333bc0b34fbfa52edbd3f5e3a9077
    - https://github.com/llvm/llvm-project/releases/download/llvmorg-9.0.1/lld-9.0.1.src.tar.xz : 86262bad3e2fd784ba8c5e2158d7aa36f12b85f2515e95bc81d65d75bb9b0c82
    - https://github.com/llvm/llvm-project/releases/download/llvmorg-9.0.1/clang-tools-extra-9.0.1.src.tar.xz : b26fd72a78bd7db998a26270ec9ec6a01346651d88fa87b4b323e13049fb6f07
    - https://github.com/llvm/llvm-project/releases/download/llvmorg-9.0.1/libcxx-9.0.1.src.tar.xz : 0981ff11b862f4f179a13576ab0a2f5530f46bd3b6b4a90f568ccc6a62914b34
    - https://github.com/llvm/llvm-project/releases/download/llvmorg-9.0.1/libcxxabi-9.0.1.src.tar.xz : e8f978aa4cfae2d7a0b4d89275637078557cca74b35c31b7283d4786948a8aac
    - https://github.com/llvm/llvm-project/releases/download/llvmorg-9.0.1/openmp-9.0.1.src.tar.xz : 5c94060f846f965698574d9ce22975c0e9f04c9b14088c3af5f03870af75cace
homepage   : http://llvm.org/
license    : Apache-2.0-with-LLVM-exception
summary    :
    - Low Level Virtual Machine (Reusable compiler and toolchains)
    - clang : Clang Compiler frontend to LLVM
    - clang-devel : Development files for building clang plugins
    - clang-32bit : 32bit libraries for clang
component  :
    - programming
    - clang : programming
debug      : no
emul32     : yes
libsplit   : no
clang      : yes
builddeps  :
    - pkgconfig32(libelf)
    - pkgconfig32(libffi)
    - pkgconfig32(libxml-2.0)
    - pkgconfig(libedit)
    - doxygen
    - glibc-32bit-devel
    - libgcc-32bit
    - llvm-32bit-devel
    - swig
    - zlib-32bit-devel
rundeps    :
    - clang :
        - llvm-devel
    - clang-devel :
        - llvm-clang
    - clang-32bit-devel :
        - llvm-clang-32bit
        - llvm-clang-devel
description: |
    The LLVM package contains a collection of modular and reusable compiler and toolchain technologies. The Low Level Virtual Machine (LLVM) Core libraries provide a modern source and target-independent optimizer, along with code generation support for many popular CPUs (as well as some less common ones!). These libraries are built around a well specified code representation known as the LLVM intermediate representation ("LLVM IR").
patterns   :
    - 32bit-devel :
        - /usr/bin/llvm-config32
        - /usr/include/llvm/Config/llvm-config-32.h
        - /usr/lib32/cmake/llvm
    - clang-32bit :
        - /usr/lib32/libclang*.so*
        - /usr/lib32/SampleAnalyzerPlugin.so
        - /usr/lib32/CheckerOptionHandlingAnalyzerPlugin.so
        - /usr/lib32/CheckerDependencyHandlingAnalyzerPlugin.so
        - /usr/lib32/liblldb*.so*
        - /usr/lib32/lib*omp*.so*
    - clang-32bit-devel :
        - /usr/lib32/clang
        - /usr/lib32/cmake/clang
        - /usr/lib32/libclang*.a
        - /usr/lib32/liblldb*.a
    - clang-devel :
        - /usr/include/clang*
        - /usr/include/lld*
        - /usr/include/openmp*
        - /usr/lib64/libclang*.a
    - clang :
        - /usr/bin
        - /usr/libexec
        - /usr/lib64/clang
        - /usr/lib64/libclang*.so*
        - /usr/lib64/SampleAnalyzerPlugin.so
        - /usr/lib64/CheckerOptionHandlingAnalyzerPlugin.so
        - /usr/lib64/CheckerDependencyHandlingAnalyzerPlugin.so
        - /usr/share/man/*/*clang*
        - /usr/share/man/*/*scan-build*
        - /usr/share/llvm/cmake
        - /usr/share/clang
        - /usr/share/opt-viewer
        - /usr/share/scan-build
        - /usr/share/scan-view
    - devel :
        - /usr/bin/FileCheck
        - /usr/bin/bugpoint
        - /usr/bin/count
        - /usr/bin/dsymutil
        - /usr/bin/lli*
        - /usr/bin/llc*
        - /usr/bin/llvm*
        - /usr/bin/not
        - /usr/bin/obj2yaml
        - /usr/bin/opt
        - /usr/bin/sancov
        - /usr/bin/sanstats
        - /usr/bin/verify-uselistorder
        - /usr/bin/yaml-bench
        - /usr/bin/yaml2obj
        - /usr/share/llvm/cmake
replaces   :
    - clang : clang
    - clang-devel : clang-devel
environment: |
    # Decontaminate build environment
    unset LDFLAGS
    unset LD_AS_NEEDED

    # Set build flags
    if [[ -z "${EMUL32BUILD}" ]]; then
        export _LLVM_TRIPLE="%HOST%"
        export _LLVM_ARCH="x86_64"
        export _LLVM_FLAGS_FINAL="-march=x86-64 -mtune=generic -gline-tables-only -O3 -fstack-protector -pipe -DNDEBUG"
    else
        export _LLVM_TRIPLE="i686-pc-linux-gnu"
        export _LLVM_ARCH="i686"
        export _LLVM_FLAGS_FINAL="-march=i686 -mtune=generic -gline-tables-only -O3 -fstack-protector -pipe -DNDEBUG"
    fi
setup      : |
    # llvm patches
    %patch -p1 < $pkgfiles/0001-llvm-Let-the-linker-find-the-correct-ffi-as-cmake-br.patch

    mkdir -p tools

    # Set up our tools (cfe)
    tar xf $sources/clang-${version}.src.tar.xz -C tools
    mv tools/clang-${version}.src tools/clang

    # Set up compiler-rt
    tar xf $sources/compiler-rt-${version}.src.tar.xz -C projects
    mv projects/compiler-rt-${version}.src projects/compiler-rt

    pushd projects/compiler-rt
        %patch -p1 < $pkgfiles/fix-sanitizers-common-build-glibc-3.31.patch
    popd

    # Set up openmp
    tar xf $sources/openmp-${version}.src.tar.xz -C projects
    mv projects/openmp-${version}.src projects/openmp

    # Patch cfe for Solus specific options
    pushd tools/clang
        %patch -p1 < $pkgfiles/0001-cfe-Use-correct-Solus-multilib-paths.patch
        %patch -p1 < $pkgfiles/0002-cfe-Use-the-GNU-hash-style-for-Solus-binary-build-id.patch
        %patch -p1 < $pkgfiles/0001-Enable-stack-protector-strong-by-default.patch
    popd

    if [[ -z "${EMUL32BUILD}" ]]; then
        # Set up clang-tools-extra
        tar xf $sources/clang-tools-extra-${version}*.src.tar.xz -C tools/clang/tools
        mv tools/clang/tools/clang-tools-extra-${version}*.src tools/clang/tools/extra

        # Set up lld
        tar xf $sources/lld-${version}.src.tar.xz -C tools
        mv tools/lld-${version}.src tools/lld

        # Pull lld in line with binutils linkers for consistency
        pushd tools/lld
            %patch -p1 < $pkgfiles/0001-Enable-as-needed-with-LD_AS_NEEDED-variable.patch
            %patch -p1 < $pkgfiles/0002-Make-gnuhash-the-default-when-not-specified.patch
        popd
    fi

    # Now set up all of the projects (libcxx, libcxxabi)
    mkdir -p projects
    for project in libcxx libcxxabi ; do
        tar xf $sources/${project}-${version}.src.tar.xz -C projects
        mv projects/${project}-${version}.src projects/${project}
    done

    # Set up stage2 final flags
    export CFLAGS="$_LLVM_FLAGS_FINAL"
    export CXXFLAGS="$_LLVM_FLAGS_FINAL"

    # Configure
    mkdir solusBuildDir
    pushd solusBuildDir
    cmake -G Ninja .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_C_FLAGS_RELEASE="$CFLAGS" \
        -DCMAKE_CXX_FLAGS_RELEASE="$CXXFLAGS" \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_AR="/usr/bin/llvm-ar" \
        -DCMAKE_STRIP="/usr/bin/llvm-strip" \
        -DCMAKE_RANLIB="/usr/bin/llvm-ranlib" \
        -DCMAKE_NM="/usr/bin/llvm-nm" \
        -DCLANG_DEFAULT_LINKER="lld" \
        -DCLANG_DEFAULT_OBJCOPY="llvm-objcopy" \
        -DLLVM_INSTALL_UTILS=ON \
        -DLLVM_LIBDIR_SUFFIX=%LIBSUFFIX% \
        -DLLVM_TARGET_ARCH=$_LLVM_ARCH \
        -DLLVM_BINUTILS_INCDIR=/usr/include \
        -DLLVM_DEFAULT_TARGET_TRIPLE=$_LLVM_TRIPLE \
        -DLLVM_ENABLE_FFI=ON \
        -DLLVM_ENABLE_ZLIB=ON \
        -DLLVM_BUILD_DOCS=OFF \
        -DLLVM_ENABLE_RTTI=ON \
        -DLLVM_ENABLE_ASSERTIONS=OFF \
        -DLLVM_ENABLE_CXX1Y=ON \
        -DENABLE_LINKER_BUILD_ID=ON \
        -DLLVM_ENABLE_PIC=ON \
        -DLLVM_TARGETS_TO_BUILD="host;AMDGPU;BPF" \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON
    popd
build      : |
    %ninja_build -v
install    : |
    %ninja_install -v
    if [[ ! -z "${EMUL32BUILD}" ]]; then
        mv $installdir/usr/bin/llvm-config{,32}
    fi
    mv $installdir/usr/include/llvm/Config/llvm-config.h $installdir/usr/include/llvm/Config/llvm-config-%LIBSUFFIX%.h

    # Do NOT include libgomp*, it will conflict with libgomp
    rm $installdir/%libdir%/libgomp.*

    # Only execute for 64bit build
    if [[ -z "${EMUL32BUILD}" ]]; then
        install -d -D -m 00755 $installdir/%libdir%/bfd-plugins
        ln -sv ../LLVMgold.so $installdir/%libdir%/bfd-plugins/.
        # Finally add our compatibility header
        install -m 00644 $pkgfiles/llvm-config.h $installdir/usr/include/llvm/Config/llvm-config.h
    fi
